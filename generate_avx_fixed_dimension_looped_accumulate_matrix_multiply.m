% The num_vfops reported by these functions is a fixed value, the actual
% value depends upon if the compiler optimiser decides to unroll the inner
% loops with constant number of iterations for nr_c and dot_product_length
function mat_mulx_attribs = generate_avx_fixed_dimension_looped_accumulate_matrix_multiply (mat_mulx_attribs)
    [~,~] = mkdir ('mat_mul_fragments/cmat_mulx_avx_looped_accumulate');
    c_fid = fopen ('cmat_mulx_fixed_dimension_looped_accumulate_matrix_multiplies.c','wt');
    h_fid = fopen ('cmat_mulx_fixed_dimension_looped_accumulate_matrix_multiplies.h','wt');

    lines = { ...
'#include <immintrin.h>' ...
'#include <sal.h>' ...
'' ...
'#include "cmat_mulx_fixed_dimension_looped_accumulate_matrix_multiplies.h"' ...
''};
    write_lines_to_file (c_fid, lines);
    
    for nr_c = 2:20
        for dot_product_length = 2:20
            func_name = sprintf ('cmat_mulx_avx_looped_accumulate_nr_c_%u_dot_product_length_%u', ...
                nr_c, dot_product_length);
            func_filename = sprintf ('mat_mul_fragments/cmat_mulx_avx_looped_accumulate/%s.c', func_name);
            c_fragment_fid = fopen (func_filename, 'wt');
            num_vfops = generate_function (c_fragment_fid, h_fid, func_name, nr_c, dot_product_length);
            fclose (c_fragment_fid);
            fprintf (c_fid, '#include "%s"\n', func_filename);
            generated_funcs(nr_c, dot_product_length) = true;
            if nargin >= 1
                mat_mulx_attribs{func_name, 'multiply_type'} = {'cmat_mulx_avx_looped_accumulate'};
                mat_mulx_attribs{func_name, 'nr_c'} = nr_c;
                mat_mulx_attribs{func_name, 'dot_product_length'} = dot_product_length;
                mat_mulx_attribs{func_name, 'num_vfops'} = num_vfops;
            end
        end
    end
    
    generated_size = size(generated_funcs);
    max_nr_c = generated_size(1);
    max_dot_product_length = generated_size(2);
    lines = { ...
'' ...
'typedef void (*cmat_mulx_fixed_dimension_looped_accumulate_func) (SAL_cf32 *A[],   /* left input matrix array [nr_c] of pointers to each row  */' ...
'                                                                  SAL_cf32 *B[],   /* right input matrix array [dot_product_length] of pointers to each row */' ...
'                                                                  SAL_cf32 *C[],   /* output matrix array [nr_c] of pointers to each row */' ...
'                                                                  SAL_i32 nc_c);   /* column count in C */' ...
'' ...
sprintf('#define CMAT_MULX_FIXED_DIMENSION_LOOPED_ACCUMULATE_MAX_NR_C %u', max_nr_c) ...
sprintf('#define CMAT_MULX_FIXED_DIMENSION_LOOPED_ACCUMULATE_MAX_DOT_PRODUCT_LENGTH %u', max_dot_product_length) ...
'extern const cmat_mulx_fixed_dimension_looped_accumulate_func cmat_mulx_fixed_dimension_looped_accumulate_functions[CMAT_MULX_FIXED_DIMENSION_LOOPED_ACCUMULATE_MAX_NR_C+1][CMAT_MULX_FIXED_DIMENSION_LOOPED_ACCUMULATE_MAX_DOT_PRODUCT_LENGTH+1];'};
    write_lines_to_file (h_fid, lines);

    lines = { ...
'' ...
'const cmat_mulx_fixed_dimension_looped_accumulate_func cmat_mulx_fixed_dimension_looped_accumulate_functions[CMAT_MULX_FIXED_DIMENSION_LOOPED_ACCUMULATE_MAX_NR_C+1][CMAT_MULX_FIXED_DIMENSION_LOOPED_ACCUMULATE_MAX_DOT_PRODUCT_LENGTH+1] =' ...
'{'};
    write_lines_to_file (c_fid, lines);
    for nr_c = 0:max_nr_c
        fprintf (c_fid, '    {');
        for dot_product_length = 0:max_dot_product_length
            func_exists = false;
            if (nr_c > 0) && (dot_product_length > 0)
                func_exists = generated_funcs (nr_c, dot_product_length);
            end
            if dot_product_length > 0
                fprintf (c_fid, ',');
            end
            if func_exists
                fprintf (c_fid, 'cmat_mulx_avx_looped_accumulate_nr_c_%u_dot_product_length_%u', nr_c, dot_product_length);
            else
                fprintf (c_fid, 'NULL');
            end
        end
        if nr_c < max_nr_c
            fprintf (c_fid, '},\n');
        else
            fprintf (c_fid, '}\n');
        end
    end
    
    fprintf (c_fid, '};\n');
    
    fclose (c_fid);
    fclose (h_fid);
end

function num_vfops = generate_function (c_fid, h_fid, func_name, nr_c, dot_product_length)
    lines = {...
'/* For a complex interleave AVX vector swap the real and imaginary parts */' ...
'#ifndef SWAP_REAL_IMAG_PERMUTE' ...
'#define SWAP_REAL_IMAG_PERMUTE 0xB1' ...
'#endif' ...
''};
    write_lines_to_file (c_fid, lines);

    % Write function definition / prototype
    func_type_and_name = ['void ' func_name ' ('];
    nr_c_array = sprintf('%-6s', sprintf('[%u],', nr_c));
    dot_product_array = sprintf('%-6s', sprintf('[%u],', dot_product_length));
    align_spaces = repmat (' ', [1 length(func_type_and_name)]);
    lines = { ...
[func_type_and_name 'SAL_cf32 *A' nr_c_array '/* left input matrix array [nr_c] of pointers to each row */'] ...
[align_spaces       'SAL_cf32 *B' dot_product_array '/* right input matrix array [dot_product_length] of pointers to each row */'] ...
[align_spaces       'SAL_cf32 *C' nr_c_array '/* output matrix array [nr_c] of pointers to each row */'] ...
[align_spaces       'SAL_i32 nc_c)    /* column count in C */']};

    write_lines_to_file (c_fid, lines);
    lines = strrep (lines,') ',');');
    write_lines_to_file (h_fid, lines);
    fprintf (h_fid, '\n');
    
    fprintf (c_fid, '{\n');
    
    % Write array to hold the left matrix cached in AVX vectors
    for r_i=['r' 'i']
        line = sprintf ('    __m256 left_%s[%u][%u];', r_i, nr_c, dot_product_length);
        fprintf (c_fid, '%s\n', line);
    end
    
    % Write variables to hold one AVX vector from the right matrix
    fprintf (c_fid, '    __m256 right_r_i, right_i_r;\n');

    % Write variables to accumulate one column of the output matrix in AVX
    % vectors
    fprintf (c_fid, '    __m256 output[%u];\n', nr_c);
    
    % Loop variables
    fprintf (c_fid, '    SAL_i32 c_c;\n');
    fprintf (c_fid, '    SAL_i32 left_row;\n');
    fprintf (c_fid, '    SAL_i32 left_col;\n');
    fprintf (c_fid, '    SAL_i32 output_row;\n');
    fprintf (c_fid, '    SAL_i32 right_row;\n');
    
    % Write code to load the left matrix into AVX vectors
    lines = {...
'#ifdef IACA_LOAD_LEFT' ...
'    IACA_START' ...
'#endif'};
    write_lines_to_file (c_fid, lines);
    lines = {...
['    for (left_row = 0; left_row < ' num2str(nr_c) '; left_row++)'] ...
 '    {' ...
['        for (left_col = 0; left_col < ' num2str(dot_product_length) '; left_col++)'] ...
 '        {' ...
 '            left_r[left_row][left_col] = _mm256_broadcast_ss (&(A[left_row] + left_col)->real);' ...
 '            left_i[left_row][left_col] = _mm256_broadcast_ss (&(A[left_row] + left_col)->imag);' ...
 '        }' ...
 '    }'};
    write_lines_to_file (c_fid, lines);
    lines = {...
'#ifdef IACA_LOAD_LEFT' ...
'    IACA_END' ...
'#endif'};
    write_lines_to_file (c_fid, lines);
    
    % Write start of loop to process one right and output column at a time
    num_vfops = 0;
    lines = { ...
'' ...    
'    for (c_c = 0; c_c < nc_c; c_c += 4)' ...
'    {' ...
'#ifdef IACA_OPERATE' ...
'        IACA_START' ...
'#endif'};
    write_lines_to_file (c_fid, lines);
    
    % Write code to zero one output column
    lines = { ...
['        for (output_row = 0; output_row < ' num2str(nr_c) '; output_row++)'] ...
 '        {' ...
 '            output[output_row] = _mm256_set1_ps (0.0f);' ...
 '        }'};
    write_lines_to_file (c_fid, lines);
    
    lines = { ...
 '' ...
['        for (right_row = 0; right_row < ' num2str(dot_product_length) '; right_row++)'] ...
 '        {' ...
 '            right_r_i = _mm256_load_ps (&(B[right_row] + c_c)->real);' ...
 '            right_i_r = _mm256_permute_ps (right_r_i, SWAP_REAL_IMAG_PERMUTE);' ...
['            for (output_row = 0; output_row < ' num2str(nr_c) '; output_row++)'] ...
 '            {' ...
 '                output[output_row] = _mm256_add_ps (output[output_row], _mm256_addsub_ps (_mm256_mul_ps (right_r_i, left_r[output_row][right_row]),' ...
 '                                                                                          _mm256_mul_ps (right_i_r, left_i[output_row][right_row])));' ...
 '            }' ...
 '        }'};
    write_lines_to_file (c_fid, lines);
    num_vfops = num_vfops + 4;
    
    % Write code to store one output column
    lines = { ...
 '' ...
['        for (output_row = 0; output_row < ' num2str(nr_c) '; output_row++)'] ...
 '        {' ...
 '            _mm256_store_ps (&(C[output_row] + c_c)->real, output[output_row]);' ...
 '        }'};
    write_lines_to_file (c_fid, lines);

    % Complete C function
    lines = {...
'    }' ...
'#ifdef IACA_OPERATE' ...
'    IACA_END' ...
'#endif' ...
'}' ...
''};
    write_lines_to_file (c_fid, lines);
end

function write_lines_to_file (fid, lines)
    for line_num = 1:length(lines)
        fprintf (fid, '%s\n', lines{line_num});
    end
end